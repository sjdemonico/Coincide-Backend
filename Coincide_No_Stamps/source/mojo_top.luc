module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    input pulseA,
    input pulseB,
    input pulseC,
    input pulseD
  ) {
  
  sig rst;                  // reset signal
  const CLKSPEED = 200000000;
  var i;
  
  fastclk fast(.CLK_IN1(clk));
  .clk(fast.CLK_OUT2) {
    reset_conditioner reset_cond;
    .rst(rst){
      // the avr_interface module is used to talk to the AVR for access to the USB port and analog pins
      avr_interface avr(#CLK_FREQ(CLKSPEED));
      reg_interface reg(#CLK_FREQ(CLKSPEED));
      timer tmr(#SIZE($clog2(CLKSPEED)),#TOP(CLKSPEED - 1));
      dff pins[4];
      dff counts[15][$clog2(CLKSPEED/2)];
      dff count_store[15][$clog2(CLKSPEED/2)];
      dff poll_flag;
      
      //pulse duplicators
      duplicator dupA;
      duplicator dupB;
      duplicator dupC;
      duplicator dupD;
      
      //channel comparators
      comparator compA;
      comparator compB;
      comparator compC;
      comparator compD;
      comparator compAB;
      comparator compAC;
      comparator compAD;
      comparator compBC;
      comparator compBD;
      comparator compCD;
      comparator compABC;
      comparator compABD;
      comparator compACD;
      comparator compBCD;
      comparator compABCD;

    }
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    //pulse duplicator connections in
    dupA.pulse = pulseA;
    dupB.pulse = pulseB;
    dupC.pulse = pulseC;
    dupD.pulse = pulseD;
    //pulse duplicator connections out
    pins.d[0] = dupA.out;
    pins.d[1] = dupB.out;
    pins.d[2] = dupC.out;
    pins.d[3] = dupD.out;
    
    //comparator connections in
    compA.pins = (pins.q | b1110);
    compB.pins = (pins.q | b1101);
    compC.pins = (pins.q | b1011);
    compD.pins = (pins.q | b0111);
    compAB.pins = (pins.q | b1100);
    compAC.pins = (pins.q | b1010);
    compAD.pins = (pins.q | b0110);
    compBC.pins = (pins.q | b1001);
    compBD.pins = (pins.q | b0101);
    compCD.pins = (pins.q | b0011);
    compABC.pins = (pins.q | b1000);
    compABD.pins = (pins.q | b0100);
    compACD.pins = (pins.q | b0010);
    compBCD.pins = (pins.q | b0001);
    compABCD.pins = (pins.q | b0000);
    
        
    // connect inputs of avr
    avr.cclk = cclk;
    avr.spi_ss = spi_ss;
    avr.spi_mosi = spi_mosi;
    avr.spi_sck = spi_sck;
    avr.rx = avr_tx;
    avr.channel = hf;           // ADC is unused so disable
    avr.tx_block = avr_rx_busy; // block TX when AVR is busy
    
    // connect outputs of avr
    spi_miso = avr.spi_miso;
    spi_channel = avr.spi_channel;
    avr_rx = avr.tx;
    
    // connect reg interface to avr interface
    reg.rx_data = avr.rx_data;
    reg.new_rx_data = avr.new_rx_data;
    avr.tx_data = reg.tx_data;
    avr.new_tx_data = reg.new_tx_data;
    reg.tx_busy = avr.tx_busy;   
    reg.regIn.drdy = 0;                   // default to not ready
    reg.regIn.data = 32bx;                // don't care
    
    //counter behavior
    if(compA.incr) counts.d[0] = counts.q[0] + 1;
    if(compB.incr) counts.d[1] = counts.q[1] + 1;
    if(compC.incr) counts.d[2] = counts.q[2] + 1;
    if(compD.incr) counts.d[3] = counts.q[3] + 1;
    if(compAB.incr) counts.d[4] = counts.q[4] + 1;
    if(compAC.incr) counts.d[5] = counts.q[5] + 1;
    if(compAD.incr) counts.d[6] = counts.q[6] + 1;
    if(compBC.incr) counts.d[7] = counts.q[7] + 1;
    if(compBD.incr) counts.d[8] = counts.q[8] + 1;
    if(compCD.incr) counts.d[9] = counts.q[9] + 1;
    if(compABC.incr) counts.d[10] = counts.q[10] + 1;
    if(compABD.incr) counts.d[11] = counts.q[11] + 1;
    if(compACD.incr) counts.d[12] = counts.q[12] + 1;
    if(compBCD.incr) counts.d[13] = counts.q[13] + 1;
    if(compABCD.incr) counts.d[14] = counts.q[14] + 1;
    
    //timer behavior
    if(tmr.maxval) {
      for (i = 0; i < 15; i++) {
        count_store.d[i] = counts.q[i];
        counts.d[i] = 0;
      }
      poll_flag.d = 1;
    }
    
    //register interface addressing behavior
    if (reg.regOut.new_cmd) {             // new command
      if (reg.regOut.write) {             // if write
        if (reg.regOut.address == 98) {    // if address is 98
          poll_flag.d = reg.regOut.data[0];  // write the poll flag
        }
      } else {                            // if read
        case(reg.regOut.address) {
          0:  reg.regIn.data = count_store.q[0];
          1:  reg.regIn.data = count_store.q[1];
          2:  reg.regIn.data = count_store.q[2];
          3:  reg.regIn.data = count_store.q[3];
          4:  reg.regIn.data = count_store.q[4];
          5:  reg.regIn.data = count_store.q[5];
          6:  reg.regIn.data = count_store.q[6];
          7:  reg.regIn.data = count_store.q[7];
          8:  reg.regIn.data = count_store.q[8];
          9:  reg.regIn.data = count_store.q[9];
          10: reg.regIn.data = count_store.q[10];
          11: reg.regIn.data = count_store.q[11];
          12: reg.regIn.data = count_store.q[12];
          13: reg.regIn.data = count_store.q[13];
          14: reg.regIn.data = count_store.q[14];
          default: reg.regIn.data = poll_flag.q;
        }
        reg.regIn.drdy = 1;                    
      }
    }
    
    led = counts.q[0][7:0];
  }
}