/*
   This file was generated automatically by the Mojo IDE version B1.3.5.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module serialbuffer_4 (
    input clk,
    input rst,
    input drdy,
    output reg new_tx_out,
    output reg [7:0] tx_data_out,
    input tx_busy_out,
    input [719:0] count_store
  );
  
  
  
  reg [4:0] M_index_d, M_index_q = 1'h0;
  
  
  localparam IDLE_state = 2'd0;
  localparam BYTE0_state = 2'd1;
  localparam BYTE1_state = 2'd2;
  localparam BYTE2_state = 2'd3;
  
  reg [1:0] M_state_d, M_state_q = IDLE_state;
  
  wire [1-1:0] M_fifo_full;
  wire [8-1:0] M_fifo_dout;
  wire [1-1:0] M_fifo_empty;
  reg [8-1:0] M_fifo_din;
  reg [1-1:0] M_fifo_wput;
  reg [1-1:0] M_fifo_rget;
  async_fifo_47 fifo (
    .wclk(clk),
    .wrst(rst),
    .rclk(clk),
    .rrst(rst),
    .din(M_fifo_din),
    .wput(M_fifo_wput),
    .rget(M_fifo_rget),
    .full(M_fifo_full),
    .dout(M_fifo_dout),
    .empty(M_fifo_empty)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_index_d = M_index_q;
    
    M_fifo_wput = 1'h0;
    M_fifo_din = 8'bxxxxxxxx;
    tx_data_out = M_fifo_dout;
    new_tx_out = !M_fifo_empty && !tx_busy_out;
    M_fifo_rget = !M_fifo_empty && !tx_busy_out;
    
    case (M_state_q)
      IDLE_state: begin
        if (drdy) begin
          M_state_d = BYTE0_state;
        end
      end
      BYTE0_state: begin
        M_fifo_din = count_store[(M_index_q)*24+0+7-:8];
        M_fifo_wput = 1'h1;
        M_state_d = BYTE1_state;
      end
      BYTE1_state: begin
        M_fifo_din = count_store[(M_index_q)*24+8+7-:8];
        M_fifo_wput = 1'h1;
        M_state_d = BYTE2_state;
      end
      BYTE2_state: begin
        M_fifo_din = count_store[(M_index_q)*24+16+7-:8];
        M_fifo_wput = 1'h1;
        if (M_index_q == 5'h1d) begin
          M_index_d = 1'h0;
          M_state_d = IDLE_state;
        end else begin
          M_index_d = M_index_q + 1'h1;
          M_state_d = BYTE0_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_index_q <= 1'h0;
    end else begin
      M_index_q <= M_index_d;
    end
  end
  
endmodule
