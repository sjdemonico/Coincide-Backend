/*
   This file was generated automatically by the Mojo IDE version B1.3.5.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    input pulseA,
    input pulseB,
    input pulseC,
    input pulseD
  );
  
  
  
  reg rst;
  
  localparam CLKSPEED = 28'hbebc200;
  
  localparam PULSE_LEN = 2'h2;
  
  wire [1-1:0] M_fast_CLK_OUT1;
  wire [1-1:0] M_fast_CLK_OUT2;
  wire [1-1:0] M_fast_CLK_OUT3;
  fastclk fast (
    .CLK_IN1(clk),
    .CLK_OUT1(M_fast_CLK_OUT1),
    .CLK_OUT2(M_fast_CLK_OUT2),
    .CLK_OUT3(M_fast_CLK_OUT3)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(M_fast_CLK_OUT2),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_avr_spi_miso;
  wire [4-1:0] M_avr_spi_channel;
  wire [1-1:0] M_avr_tx;
  wire [1-1:0] M_avr_new_sample;
  wire [10-1:0] M_avr_sample;
  wire [4-1:0] M_avr_sample_channel;
  wire [1-1:0] M_avr_tx_busy;
  wire [8-1:0] M_avr_rx_data;
  wire [1-1:0] M_avr_new_rx_data;
  reg [1-1:0] M_avr_cclk;
  reg [1-1:0] M_avr_spi_mosi;
  reg [1-1:0] M_avr_spi_sck;
  reg [1-1:0] M_avr_spi_ss;
  reg [1-1:0] M_avr_rx;
  reg [4-1:0] M_avr_channel;
  reg [8-1:0] M_avr_tx_data;
  reg [1-1:0] M_avr_new_tx_data;
  reg [1-1:0] M_avr_tx_block;
  avr_interface_2 avr (
    .clk(M_fast_CLK_OUT2),
    .rst(rst),
    .cclk(M_avr_cclk),
    .spi_mosi(M_avr_spi_mosi),
    .spi_sck(M_avr_spi_sck),
    .spi_ss(M_avr_spi_ss),
    .rx(M_avr_rx),
    .channel(M_avr_channel),
    .tx_data(M_avr_tx_data),
    .new_tx_data(M_avr_new_tx_data),
    .tx_block(M_avr_tx_block),
    .spi_miso(M_avr_spi_miso),
    .spi_channel(M_avr_spi_channel),
    .tx(M_avr_tx),
    .new_sample(M_avr_new_sample),
    .sample(M_avr_sample),
    .sample_channel(M_avr_sample_channel),
    .tx_busy(M_avr_tx_busy),
    .rx_data(M_avr_rx_data),
    .new_rx_data(M_avr_new_rx_data)
  );
  wire [8-1:0] M_reg_tx_data;
  wire [1-1:0] M_reg_new_tx_data;
  wire [66-1:0] M_reg_regOut;
  reg [8-1:0] M_reg_rx_data;
  reg [1-1:0] M_reg_new_rx_data;
  reg [1-1:0] M_reg_tx_busy;
  reg [33-1:0] M_reg_regIn;
  reg_interface_3 L_reg (
    .clk(M_fast_CLK_OUT2),
    .rst(rst),
    .rx_data(M_reg_rx_data),
    .new_rx_data(M_reg_new_rx_data),
    .tx_busy(M_reg_tx_busy),
    .regIn(M_reg_regIn),
    .tx_data(M_reg_tx_data),
    .new_tx_data(M_reg_new_tx_data),
    .regOut(M_reg_regOut)
  );
  wire [28-1:0] M_timer_value;
  counter_4 timer (
    .clk(M_fast_CLK_OUT2),
    .rst(rst),
    .value(M_timer_value)
  );
  reg [3:0] M_pins_d, M_pins_q = 1'h0;
  reg [404:0] M_count_store_d, M_count_store_q = 1'h0;
  reg M_poll_flag_d, M_poll_flag_q = 1'h0;
  wire [1-1:0] M_dupA_out;
  reg [1-1:0] M_dupA_pulse;
  duplicator_5 dupA (
    .clk(M_fast_CLK_OUT2),
    .rst(rst),
    .pulse(M_dupA_pulse),
    .out(M_dupA_out)
  );
  wire [1-1:0] M_dupB_out;
  reg [1-1:0] M_dupB_pulse;
  duplicator_5 dupB (
    .clk(M_fast_CLK_OUT2),
    .rst(rst),
    .pulse(M_dupB_pulse),
    .out(M_dupB_out)
  );
  wire [1-1:0] M_dupC_out;
  reg [1-1:0] M_dupC_pulse;
  duplicator_5 dupC (
    .clk(M_fast_CLK_OUT2),
    .rst(rst),
    .pulse(M_dupC_pulse),
    .out(M_dupC_out)
  );
  wire [1-1:0] M_dupD_out;
  reg [1-1:0] M_dupD_pulse;
  duplicator_5 dupD (
    .clk(M_fast_CLK_OUT2),
    .rst(rst),
    .pulse(M_dupD_pulse),
    .out(M_dupD_out)
  );
  wire [27-1:0] M_compA_ctrval;
  reg [4-1:0] M_compA_pins;
  comparator_9 compA (
    .clk(M_fast_CLK_OUT2),
    .rst(rst),
    .pins(M_compA_pins),
    .ctrval(M_compA_ctrval)
  );
  wire [27-1:0] M_compB_ctrval;
  reg [4-1:0] M_compB_pins;
  comparator_9 compB (
    .clk(M_fast_CLK_OUT2),
    .rst(rst),
    .pins(M_compB_pins),
    .ctrval(M_compB_ctrval)
  );
  wire [27-1:0] M_compC_ctrval;
  reg [4-1:0] M_compC_pins;
  comparator_9 compC (
    .clk(M_fast_CLK_OUT2),
    .rst(rst),
    .pins(M_compC_pins),
    .ctrval(M_compC_ctrval)
  );
  wire [27-1:0] M_compD_ctrval;
  reg [4-1:0] M_compD_pins;
  comparator_9 compD (
    .clk(M_fast_CLK_OUT2),
    .rst(rst),
    .pins(M_compD_pins),
    .ctrval(M_compD_ctrval)
  );
  wire [27-1:0] M_compAB_ctrval;
  reg [4-1:0] M_compAB_pins;
  comparator_9 compAB (
    .clk(M_fast_CLK_OUT2),
    .rst(rst),
    .pins(M_compAB_pins),
    .ctrval(M_compAB_ctrval)
  );
  wire [27-1:0] M_compAC_ctrval;
  reg [4-1:0] M_compAC_pins;
  comparator_9 compAC (
    .clk(M_fast_CLK_OUT2),
    .rst(rst),
    .pins(M_compAC_pins),
    .ctrval(M_compAC_ctrval)
  );
  wire [27-1:0] M_compAD_ctrval;
  reg [4-1:0] M_compAD_pins;
  comparator_9 compAD (
    .clk(M_fast_CLK_OUT2),
    .rst(rst),
    .pins(M_compAD_pins),
    .ctrval(M_compAD_ctrval)
  );
  wire [27-1:0] M_compBC_ctrval;
  reg [4-1:0] M_compBC_pins;
  comparator_9 compBC (
    .clk(M_fast_CLK_OUT2),
    .rst(rst),
    .pins(M_compBC_pins),
    .ctrval(M_compBC_ctrval)
  );
  wire [27-1:0] M_compBD_ctrval;
  reg [4-1:0] M_compBD_pins;
  comparator_9 compBD (
    .clk(M_fast_CLK_OUT2),
    .rst(rst),
    .pins(M_compBD_pins),
    .ctrval(M_compBD_ctrval)
  );
  wire [27-1:0] M_compCD_ctrval;
  reg [4-1:0] M_compCD_pins;
  comparator_9 compCD (
    .clk(M_fast_CLK_OUT2),
    .rst(rst),
    .pins(M_compCD_pins),
    .ctrval(M_compCD_ctrval)
  );
  wire [27-1:0] M_compABC_ctrval;
  reg [4-1:0] M_compABC_pins;
  comparator_9 compABC (
    .clk(M_fast_CLK_OUT2),
    .rst(rst),
    .pins(M_compABC_pins),
    .ctrval(M_compABC_ctrval)
  );
  wire [27-1:0] M_compABD_ctrval;
  reg [4-1:0] M_compABD_pins;
  comparator_9 compABD (
    .clk(M_fast_CLK_OUT2),
    .rst(rst),
    .pins(M_compABD_pins),
    .ctrval(M_compABD_ctrval)
  );
  wire [27-1:0] M_compACD_ctrval;
  reg [4-1:0] M_compACD_pins;
  comparator_9 compACD (
    .clk(M_fast_CLK_OUT2),
    .rst(rst),
    .pins(M_compACD_pins),
    .ctrval(M_compACD_ctrval)
  );
  wire [27-1:0] M_compBCD_ctrval;
  reg [4-1:0] M_compBCD_pins;
  comparator_9 compBCD (
    .clk(M_fast_CLK_OUT2),
    .rst(rst),
    .pins(M_compBCD_pins),
    .ctrval(M_compBCD_ctrval)
  );
  wire [27-1:0] M_compABCD_ctrval;
  reg [4-1:0] M_compABCD_pins;
  comparator_9 compABCD (
    .clk(M_fast_CLK_OUT2),
    .rst(rst),
    .pins(M_compABCD_pins),
    .ctrval(M_compABCD_ctrval)
  );
  
  always @* begin
    M_pins_d = M_pins_q;
    M_poll_flag_d = M_poll_flag_q;
    M_count_store_d = M_count_store_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    M_dupA_pulse = pulseA;
    M_dupB_pulse = pulseB;
    M_dupC_pulse = pulseC;
    M_dupD_pulse = pulseD;
    M_pins_d[0+0-:1] = M_dupA_out;
    M_pins_d[1+0-:1] = M_dupB_out;
    M_pins_d[2+0-:1] = M_dupC_out;
    M_pins_d[3+0-:1] = M_dupD_out;
    M_compA_pins = (M_pins_q | 4'h7);
    M_compB_pins = (M_pins_q | 4'hb);
    M_compC_pins = (M_pins_q | 4'hd);
    M_compD_pins = (M_pins_q | 4'he);
    M_compAB_pins = (M_pins_q | 4'h3);
    M_compAC_pins = (M_pins_q | 4'h5);
    M_compAD_pins = (M_pins_q | 4'h6);
    M_compBC_pins = (M_pins_q | 4'h9);
    M_compBD_pins = (M_pins_q | 4'ha);
    M_compCD_pins = (M_pins_q | 4'hc);
    M_compABC_pins = (M_pins_q | 4'h1);
    M_compABD_pins = (M_pins_q | 4'h2);
    M_compACD_pins = (M_pins_q | 4'h4);
    M_compBCD_pins = (M_pins_q | 4'h8);
    M_compABCD_pins = (M_pins_q | 4'h0);
    M_avr_cclk = cclk;
    M_avr_spi_ss = spi_ss;
    M_avr_spi_mosi = spi_mosi;
    M_avr_spi_sck = spi_sck;
    M_avr_rx = avr_tx;
    M_avr_channel = 4'hf;
    M_avr_tx_block = avr_rx_busy;
    spi_miso = M_avr_spi_miso;
    spi_channel = M_avr_spi_channel;
    avr_rx = M_avr_tx;
    M_reg_rx_data = M_avr_rx_data;
    M_reg_new_rx_data = M_avr_new_rx_data;
    M_avr_tx_data = M_reg_tx_data;
    M_avr_new_tx_data = M_reg_new_tx_data;
    M_reg_tx_busy = M_avr_tx_busy;
    M_reg_regIn[32+0-:1] = 1'h0;
    M_reg_regIn[0+31-:32] = 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
    if (M_timer_value == 29'h0bebc1ff) begin
      M_count_store_d[0+26-:27] = M_compA_ctrval;
      M_count_store_d[27+26-:27] = M_compB_ctrval;
      M_count_store_d[54+26-:27] = M_compC_ctrval;
      M_count_store_d[81+26-:27] = M_compD_ctrval;
      M_count_store_d[108+26-:27] = M_compAB_ctrval;
      M_count_store_d[135+26-:27] = M_compAC_ctrval;
      M_count_store_d[162+26-:27] = M_compAD_ctrval;
      M_count_store_d[189+26-:27] = M_compBC_ctrval;
      M_count_store_d[216+26-:27] = M_compBD_ctrval;
      M_count_store_d[243+26-:27] = M_compCD_ctrval;
      M_count_store_d[270+26-:27] = M_compABC_ctrval;
      M_count_store_d[297+26-:27] = M_compABD_ctrval;
      M_count_store_d[324+26-:27] = M_compACD_ctrval;
      M_count_store_d[351+26-:27] = M_compBCD_ctrval;
      M_count_store_d[378+26-:27] = M_compABCD_ctrval;
    end
    if (M_reg_regOut[0+0-:1]) begin
      if (M_reg_regOut[1+0-:1]) begin
        if (M_reg_regOut[2+31-:32] == 7'h62) begin
          M_poll_flag_d = M_reg_regOut[34+0+0-:1];
        end
      end else begin
        
        case (M_reg_regOut[2+31-:32])
          1'h0: begin
            M_reg_regIn[0+31-:32] = M_count_store_q[0+26-:27];
          end
          1'h1: begin
            M_reg_regIn[0+31-:32] = M_count_store_q[27+26-:27];
          end
          2'h2: begin
            M_reg_regIn[0+31-:32] = M_count_store_q[54+26-:27];
          end
          2'h3: begin
            M_reg_regIn[0+31-:32] = M_count_store_q[81+26-:27];
          end
          3'h4: begin
            M_reg_regIn[0+31-:32] = M_count_store_q[108+26-:27];
          end
          3'h5: begin
            M_reg_regIn[0+31-:32] = M_count_store_q[135+26-:27];
          end
          3'h6: begin
            M_reg_regIn[0+31-:32] = M_count_store_q[162+26-:27];
          end
          3'h7: begin
            M_reg_regIn[0+31-:32] = M_count_store_q[189+26-:27];
          end
          4'h8: begin
            M_reg_regIn[0+31-:32] = M_count_store_q[216+26-:27];
          end
          4'h9: begin
            M_reg_regIn[0+31-:32] = M_count_store_q[243+26-:27];
          end
          4'ha: begin
            M_reg_regIn[0+31-:32] = M_count_store_q[270+26-:27];
          end
          4'hb: begin
            M_reg_regIn[0+31-:32] = M_count_store_q[297+26-:27];
          end
          4'hc: begin
            M_reg_regIn[0+31-:32] = M_count_store_q[324+26-:27];
          end
          4'hd: begin
            M_reg_regIn[0+31-:32] = M_count_store_q[351+26-:27];
          end
          4'he: begin
            M_reg_regIn[0+31-:32] = M_count_store_q[378+26-:27];
          end
          default: begin
            M_reg_regIn[0+31-:32] = M_poll_flag_q;
          end
        endcase
        M_reg_regIn[32+0-:1] = 1'h1;
      end
    end
    led[0+3-:4] = M_pins_q;
    led[4+3-:4] = 4'h0;
  end
  
  always @(posedge M_fast_CLK_OUT2) begin
    if (rst == 1'b1) begin
      M_pins_q <= 1'h0;
      M_count_store_q <= 1'h0;
      M_poll_flag_q <= 1'h0;
    end else begin
      M_pins_q <= M_pins_d;
      M_count_store_q <= M_count_store_d;
      M_poll_flag_q <= M_poll_flag_d;
    end
  end
  
endmodule
