

module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    input pulseA,
    input pulseB,
    input pulseC,
    input pulseD
  ) {
  
  sig rst;                  // reset signal
  const CLKSPEED = 150000000;
  var i;
  
  fastclk fast(.CLK_IN1(clk));
  .clk(fast.CLK_OUT1) {
    reset_conditioner reset_cond;
    .rst(rst){
      // the avr_interface module is used to talk to the AVR for access to the USB port and analog pins
      avr_interface avr(#CLK_FREQ(CLKSPEED));
      reg_interface reg(#CLK_FREQ(CLKSPEED));
      timer tmr(#SIZE($clog2(CLKSPEED/2)),#TOP((CLKSPEED/2) - 1));
      dff pins[2][4];
      dff pulse_length[2][4];
      dff counts[30][$clog2(CLKSPEED/4)];
      dff count_store[30][$clog2(CLKSPEED/4)];
      dff poll_flag;
      dff noop; //debug
      
      //pulse duplicators
      .length(pulse_length.q[0]) {
        duplicator xdupA;
        duplicator xdupB;
        duplicator xdupC;
        duplicator xdupD;
      }
      .length(pulse_length.q[1]) {
        duplicator ydupA;
        duplicator ydupB;
        duplicator ydupC;
        duplicator ydupD;
      }
      
      //channel comparators
      .length(pulse_length.q[0]) {
        comparator xcompA;
        comparator xcompB;
        comparator xcompC;
        comparator xcompD;
        comparator xcompAB;
        comparator xcompAC;
        comparator xcompAD;
        comparator xcompBC;
        comparator xcompBD;
        comparator xcompCD;
        comparator xcompABC;
        comparator xcompABD;
        comparator xcompACD;
        comparator xcompBCD;
        comparator xcompABCD;
      }
      .length(pulse_length.q[1]) {
        comparator ycompA;
        comparator ycompB;
        comparator ycompC;
        comparator ycompD;
        comparator ycompAB;
        comparator ycompAC;
        comparator ycompAD;
        comparator ycompBC;
        comparator ycompBD;
        comparator ycompCD;
        comparator ycompABC;
        comparator ycompABD;
        comparator ycompACD;
        comparator ycompBCD;
        comparator ycompABCD;
      }
    }
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    noop.d = noop.q;
    
    //pulse duplicator connections in
    xdupA.pulse = pulseA;
    xdupB.pulse = pulseB;
    xdupC.pulse = pulseC;
    xdupD.pulse = pulseD;
    ydupA.pulse = pulseA;
    ydupB.pulse = pulseB;
    ydupC.pulse = pulseC;
    ydupD.pulse = pulseD;
    //pulse duplicator connections out
    pins.d[0][0] = xdupA.out;
    pins.d[0][1] = xdupB.out;
    pins.d[0][2] = xdupC.out;
    pins.d[0][3] = xdupD.out;
    pins.d[1][0] = ydupA.out;
    pins.d[1][1] = ydupB.out;
    pins.d[1][2] = ydupC.out;
    pins.d[1][3] = ydupD.out;
    
    //comparator connections in
    xcompA.pins = (pins.q[0] | b1110);
    xcompB.pins = (pins.q[0] | b1101);
    xcompC.pins = (pins.q[0] | b1011);
    xcompD.pins = (pins.q[0] | b0111);
    xcompAB.pins = (pins.q[0] | b1100);
    xcompAC.pins = (pins.q[0] | b1010);
    xcompAD.pins = (pins.q[0] | b0110);
    xcompBC.pins = (pins.q[0] | b1001);
    xcompBD.pins = (pins.q[0] | b0101);
    xcompCD.pins = (pins.q[0] | b0011);
    xcompABC.pins = (pins.q[0] | b1000);
    xcompABD.pins = (pins.q[0] | b0100);
    xcompACD.pins = (pins.q[0] | b0010);
    xcompBCD.pins = (pins.q[0] | b0001);
    xcompABCD.pins = (pins.q[0] | b0000);
    ycompA.pins = (pins.q[1] | b1110);
    ycompB.pins = (pins.q[1] | b1101);
    ycompC.pins = (pins.q[1] | b1011);
    ycompD.pins = (pins.q[1] | b0111);
    ycompAB.pins = (pins.q[1] | b1100);
    ycompAC.pins = (pins.q[1] | b1010);
    ycompAD.pins = (pins.q[1] | b0110);
    ycompBC.pins = (pins.q[1] | b1001);
    ycompBD.pins = (pins.q[1] | b0101);
    ycompCD.pins = (pins.q[1] | b0011);
    ycompABC.pins = (pins.q[1] | b1000);
    ycompABD.pins = (pins.q[1] | b0100);
    ycompACD.pins = (pins.q[1] | b0010);
    ycompBCD.pins = (pins.q[1] | b0001);
    ycompABCD.pins = (pins.q[1] | b0000);
    
        
    // connect inputs of avr
    avr.cclk = cclk;
    avr.spi_ss = spi_ss;
    avr.spi_mosi = spi_mosi;
    avr.spi_sck = spi_sck;
    avr.rx = avr_tx;
    avr.channel = hf;           // ADC is unused so disable
    avr.tx_block = avr_rx_busy; // block TX when AVR is busy
    
    // connect outputs of avr
    spi_miso = avr.spi_miso;
    spi_channel = avr.spi_channel;
    avr_rx = avr.tx;
    
    // connect reg interface to avr interface
    reg.rx_data = avr.rx_data;
    reg.new_rx_data = avr.new_rx_data;
    avr.tx_data = reg.tx_data;
    avr.new_tx_data = reg.new_tx_data;
    reg.tx_busy = avr.tx_busy;   
    reg.regIn.drdy = 0;                   // default to not ready
    reg.regIn.data = 32bx;                // don't care
    
    //counter behavior
    if(xcompA.incr) counts.d[0] = counts.q[0] + 1;
    if(xcompB.incr) counts.d[1] = counts.q[1] + 1;
    if(xcompC.incr) counts.d[2] = counts.q[2] + 1;
    if(xcompD.incr) counts.d[3] = counts.q[3] + 1;
    if(xcompAB.incr) counts.d[4] = counts.q[4] + 1;
    if(xcompAC.incr) counts.d[5] = counts.q[5] + 1;
    if(xcompAD.incr) counts.d[6] = counts.q[6] + 1;
    if(xcompBC.incr) counts.d[7] = counts.q[7] + 1;
    if(xcompBD.incr) counts.d[8] = counts.q[8] + 1;
    if(xcompCD.incr) counts.d[9] = counts.q[9] + 1;
    if(xcompABC.incr) counts.d[10] = counts.q[10] + 1;
    if(xcompABD.incr) counts.d[11] = counts.q[11] + 1;
    if(xcompACD.incr) counts.d[12] = counts.q[12] + 1;
    if(xcompBCD.incr) counts.d[13] = counts.q[13] + 1;
    if(xcompABCD.incr) counts.d[14] = counts.q[14] + 1;
    if(ycompA.incr) counts.d[15] = counts.q[15] + 1;
    if(ycompB.incr) counts.d[16] = counts.q[16] + 1;
    if(ycompC.incr) counts.d[17] = counts.q[17] + 1;
    if(ycompD.incr) counts.d[18] = counts.q[18] + 1;
    if(ycompAB.incr) counts.d[19] = counts.q[19] + 1;
    if(ycompAC.incr) counts.d[20] = counts.q[20] + 1;
    if(ycompAD.incr) counts.d[21] = counts.q[21] + 1;
    if(ycompBC.incr) counts.d[22] = counts.q[22] + 1;
    if(ycompBD.incr) counts.d[23] = counts.q[23] + 1;
    if(ycompCD.incr) counts.d[24] = counts.q[24] + 1;
    if(ycompABC.incr) counts.d[25] = counts.q[25] + 1;
    if(ycompABD.incr) counts.d[26] = counts.q[26] + 1;
    if(ycompACD.incr) counts.d[27] = counts.q[27] + 1;
    if(ycompBCD.incr) counts.d[28] = counts.q[28] + 1;
    if(ycompABCD.incr) counts.d[29] = counts.q[29] + 1;
    
    //timer behavior
    if(tmr.maxval) {
      for (i = 0; i < 30; i++) {
        count_store.d[i] = counts.q[i];
        counts.d[i] = 0;
      }
      poll_flag.d = 1;
    }
    
    //register interface addressing behavior
    if (reg.regOut.new_cmd) {             // new command
      if (reg.regOut.write) {             // if write
        case(reg.regOut.address) {
          98:  poll_flag.d = reg.regOut.data[0];
          99:  pulse_length.d[0] = reg.regOut.data[3:0];
          100: pulse_length.d[1] = reg.regOut.data[3:0];
          default: noop.d = noop.q; //debug
        }
      } else {                            // if read
        case(reg.regOut.address) {
          0:  reg.regIn.data = count_store.q[0];
          1:  reg.regIn.data = count_store.q[1];
          2:  reg.regIn.data = count_store.q[2];
          3:  reg.regIn.data = count_store.q[3];
          4:  reg.regIn.data = count_store.q[4];
          5:  reg.regIn.data = count_store.q[5];
          6:  reg.regIn.data = count_store.q[6];
          7:  reg.regIn.data = count_store.q[7];
          8:  reg.regIn.data = count_store.q[8];
          9:  reg.regIn.data = count_store.q[9];
          10: reg.regIn.data = count_store.q[10];
          11: reg.regIn.data = count_store.q[11];
          12: reg.regIn.data = count_store.q[12];
          13: reg.regIn.data = count_store.q[13];
          14: reg.regIn.data = count_store.q[14];
          15: reg.regIn.data = count_store.q[15];
          16: reg.regIn.data = count_store.q[16];
          17: reg.regIn.data = count_store.q[17];
          18: reg.regIn.data = count_store.q[18];
          19: reg.regIn.data = count_store.q[19];
          20: reg.regIn.data = count_store.q[20];
          21: reg.regIn.data = count_store.q[21];
          22: reg.regIn.data = count_store.q[22];
          23: reg.regIn.data = count_store.q[23];
          24: reg.regIn.data = count_store.q[24];
          25: reg.regIn.data = count_store.q[25];
          26: reg.regIn.data = count_store.q[26];
          27: reg.regIn.data = count_store.q[27];
          28: reg.regIn.data = count_store.q[28];
          29: reg.regIn.data = count_store.q[29];
          98: reg.regIn.data = poll_flag.q;
          default: noop.d = noop.q; //debug
        }
        reg.regIn.drdy = 1;                    
      }
    }
    
    led[3:0] = pulse_length.q[0];
    led[7:4] = pulse_length.q[1];
  }
}